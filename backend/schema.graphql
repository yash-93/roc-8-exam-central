# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  slug: String
  email: String
  avatar: ImageFieldOutput
  password: PasswordState
  role: String
  status: String
  reasonFlagged: String
  bookmarks(where: PaperWhereInput! = {}, orderBy: [PaperOrderByInput!]! = [], take: Int, skip: Int! = 0): [Paper!]
  bookmarksCount(where: PaperWhereInput! = {}): Int
  papers(where: PaperWhereInput! = {}, orderBy: [PaperOrderByInput!]! = [], take: Int, skip: Int! = 0): [Paper!]
  papersCount(where: PaperWhereInput! = {}): Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  email: StringFilter
  role: StringFilter
  status: StringFilter
  reasonFlagged: StringFilter
  bookmarks: PaperManyRelationFilter
  papers: PaperManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PaperManyRelationFilter {
  every: PaperWhereInput
  some: PaperWhereInput
  none: PaperWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  email: OrderDirection
  role: OrderDirection
  status: OrderDirection
  reasonFlagged: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  slug: String
  email: String
  avatar: ImageFieldInput
  password: String
  role: String
  status: String
  reasonFlagged: String
  bookmarks: PaperRelateToManyForUpdateInput
  papers: PaperRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PaperRelateToManyForUpdateInput {
  disconnect: [PaperWhereUniqueInput!]
  set: [PaperWhereUniqueInput!]
  create: [PaperCreateInput!]
  connect: [PaperWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  slug: String
  email: String
  avatar: ImageFieldInput
  password: String
  role: String
  status: String
  reasonFlagged: String
  bookmarks: PaperRelateToManyForCreateInput
  papers: PaperRelateToManyForCreateInput
}

input PaperRelateToManyForCreateInput {
  create: [PaperCreateInput!]
  connect: [PaperWhereUniqueInput!]
}

type University {
  id: ID!
  name: String
  slug: String
  city: String
  state: String
  country: String
  banner: ImageFieldOutput
  logo: ImageFieldOutput
  status: String
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
}

input UniversityWhereUniqueInput {
  id: ID
}

input UniversityWhereInput {
  AND: [UniversityWhereInput!]
  OR: [UniversityWhereInput!]
  NOT: [UniversityWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  city: StringFilter
  state: StringFilter
  country: StringFilter
  status: StringNullableFilter
  courses: CourseManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input UniversityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  city: OrderDirection
  state: OrderDirection
  country: OrderDirection
  status: OrderDirection
}

input UniversityUpdateInput {
  name: String
  slug: String
  city: String
  state: String
  country: String
  banner: ImageFieldInput
  logo: ImageFieldInput
  status: String
  courses: CourseRelateToManyForUpdateInput
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input UniversityUpdateArgs {
  where: UniversityWhereUniqueInput!
  data: UniversityUpdateInput!
}

input UniversityCreateInput {
  name: String
  slug: String
  city: String
  state: String
  country: String
  banner: ImageFieldInput
  logo: ImageFieldInput
  status: String
  courses: CourseRelateToManyForCreateInput
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

type Course {
  id: ID!
  name: String
  slug: String
  status: String
  courseCode: String
  duration: Float
  noOfSemester: Int
  semesterSystem: String
  papers(where: PaperWhereInput! = {}, orderBy: [PaperOrderByInput!]! = [], take: Int, skip: Int! = 0): [Paper!]
  papersCount(where: PaperWhereInput! = {}): Int
  university: University
}

input CourseWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  status: StringNullableFilter
  courseCode: StringFilter
  duration: FloatFilter
  noOfSemester: IntNullableFilter
  semesterSystem: StringNullableFilter
  papers: PaperManyRelationFilter
  university: UniversityWhereInput
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CourseOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  courseCode: OrderDirection
  duration: OrderDirection
  noOfSemester: OrderDirection
  semesterSystem: OrderDirection
}

input CourseUpdateInput {
  name: String
  slug: String
  status: String
  courseCode: String
  duration: Float
  noOfSemester: Int
  semesterSystem: String
  papers: PaperRelateToManyForUpdateInput
  university: UniversityRelateToOneForUpdateInput
}

input UniversityRelateToOneForUpdateInput {
  create: UniversityCreateInput
  connect: UniversityWhereUniqueInput
  disconnect: Boolean
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  name: String
  slug: String
  status: String
  courseCode: String
  duration: Float
  noOfSemester: Int
  semesterSystem: String
  papers: PaperRelateToManyForCreateInput
  university: UniversityRelateToOneForCreateInput
}

input UniversityRelateToOneForCreateInput {
  create: UniversityCreateInput
  connect: UniversityWhereUniqueInput
}

type Paper {
  id: ID!
  name: String
  slug: String
  paperCode: String
  year: Int
  semester: Int
  uploadedBy: User
  type: String
  flag: String
  status: String
  isActive: String
  original: FileFieldOutput
  source: FileFieldOutput
  university: University
  course: Course
  competitivePaper: CompetitivePaper
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input PaperWhereUniqueInput {
  id: ID
}

input PaperWhereInput {
  AND: [PaperWhereInput!]
  OR: [PaperWhereInput!]
  NOT: [PaperWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  paperCode: StringFilter
  year: IntFilter
  semester: IntNullableFilter
  uploadedBy: UserWhereInput
  type: StringNullableFilter
  flag: StringNullableFilter
  status: StringNullableFilter
  isActive: StringNullableFilter
  university: UniversityWhereInput
  course: CourseWhereInput
  competitivePaper: CompetitivePaperWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input PaperOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  paperCode: OrderDirection
  year: OrderDirection
  semester: OrderDirection
  type: OrderDirection
  flag: OrderDirection
  status: OrderDirection
  isActive: OrderDirection
}

input PaperUpdateInput {
  name: String
  slug: String
  paperCode: String
  year: Int
  semester: Int
  uploadedBy: UserRelateToOneForUpdateInput
  type: String
  flag: String
  status: String
  isActive: String
  original: FileFieldInput
  source: FileFieldInput
  university: UniversityRelateToOneForUpdateInput
  course: CourseRelateToOneForUpdateInput
  competitivePaper: CompetitivePaperRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input FileFieldInput {
  upload: Upload!
}

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input CompetitivePaperRelateToOneForUpdateInput {
  create: CompetitivePaperCreateInput
  connect: CompetitivePaperWhereUniqueInput
  disconnect: Boolean
}

input PaperUpdateArgs {
  where: PaperWhereUniqueInput!
  data: PaperUpdateInput!
}

input PaperCreateInput {
  name: String
  slug: String
  paperCode: String
  year: Int
  semester: Int
  uploadedBy: UserRelateToOneForCreateInput
  type: String
  flag: String
  status: String
  isActive: String
  original: FileFieldInput
  source: FileFieldInput
  university: UniversityRelateToOneForCreateInput
  course: CourseRelateToOneForCreateInput
  competitivePaper: CompetitivePaperRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

input CompetitivePaperRelateToOneForCreateInput {
  create: CompetitivePaperCreateInput
  connect: CompetitivePaperWhereUniqueInput
}

type CompetitivePaper {
  id: ID!
  name: String
  slug: String
  papers(where: PaperWhereInput! = {}, orderBy: [PaperOrderByInput!]! = [], take: Int, skip: Int! = 0): [Paper!]
  papersCount(where: PaperWhereInput! = {}): Int
}

input CompetitivePaperWhereUniqueInput {
  id: ID
}

input CompetitivePaperWhereInput {
  AND: [CompetitivePaperWhereInput!]
  OR: [CompetitivePaperWhereInput!]
  NOT: [CompetitivePaperWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  papers: PaperManyRelationFilter
}

input CompetitivePaperOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input CompetitivePaperUpdateInput {
  name: String
  slug: String
  papers: PaperRelateToManyForUpdateInput
}

input CompetitivePaperUpdateArgs {
  where: CompetitivePaperWhereUniqueInput!
  data: CompetitivePaperUpdateInput!
}

input CompetitivePaperCreateInput {
  name: String
  slug: String
  papers: PaperRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUniversity(data: UniversityCreateInput!): University
  createUniversities(data: [UniversityCreateInput!]!): [University]
  updateUniversity(where: UniversityWhereUniqueInput!, data: UniversityUpdateInput!): University
  updateUniversities(data: [UniversityUpdateArgs!]!): [University]
  deleteUniversity(where: UniversityWhereUniqueInput!): University
  deleteUniversities(where: [UniversityWhereUniqueInput!]!): [University]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createPaper(data: PaperCreateInput!): Paper
  createPapers(data: [PaperCreateInput!]!): [Paper]
  updatePaper(where: PaperWhereUniqueInput!, data: PaperUpdateInput!): Paper
  updatePapers(data: [PaperUpdateArgs!]!): [Paper]
  deletePaper(where: PaperWhereUniqueInput!): Paper
  deletePapers(where: [PaperWhereUniqueInput!]!): [Paper]
  createCompetitivePaper(data: CompetitivePaperCreateInput!): CompetitivePaper
  createCompetitivePapers(data: [CompetitivePaperCreateInput!]!): [CompetitivePaper]
  updateCompetitivePaper(where: CompetitivePaperWhereUniqueInput!, data: CompetitivePaperUpdateInput!): CompetitivePaper
  updateCompetitivePapers(data: [CompetitivePaperUpdateArgs!]!): [CompetitivePaper]
  deleteCompetitivePaper(where: CompetitivePaperWhereUniqueInput!): CompetitivePaper
  deleteCompetitivePapers(where: [CompetitivePaperWhereUniqueInput!]!): [CompetitivePaper]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  universities(where: UniversityWhereInput! = {}, orderBy: [UniversityOrderByInput!]! = [], take: Int, skip: Int! = 0): [University!]
  university(where: UniversityWhereUniqueInput!): University
  universitiesCount(where: UniversityWhereInput! = {}): Int
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0): [Course!]
  course(where: CourseWhereUniqueInput!): Course
  coursesCount(where: CourseWhereInput! = {}): Int
  papers(where: PaperWhereInput! = {}, orderBy: [PaperOrderByInput!]! = [], take: Int, skip: Int! = 0): [Paper!]
  paper(where: PaperWhereUniqueInput!): Paper
  papersCount(where: PaperWhereInput! = {}): Int
  competitivePapers(where: CompetitivePaperWhereInput! = {}, orderBy: [CompetitivePaperOrderByInput!]! = [], take: Int, skip: Int! = 0): [CompetitivePaper!]
  competitivePaper(where: CompetitivePaperWhereUniqueInput!): CompetitivePaper
  competitivePapersCount(where: CompetitivePaperWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
